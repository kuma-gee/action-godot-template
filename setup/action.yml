name: 'Setup templates'
description: 'Setup default godot templates and optionally custom templates with encryption'
inputs:
  game-folder:
    description: 'Directory of the game'
    default: '.'
  channel:
    description: 'Channel to build'
    required: true
    default: 'windows'
  version:
    description: 'Godot Version'
    default: '4.3'
  encryption-key:
    description: 'Encryption key'
    default: ''
  repo:
    description: 'Repository to fetch the custom templates from'
    default: ''
runs:
  using: "composite"
  steps:
    - run: |
        mkdir -v -p ~/.local/share/godot/export_templates
        mv /root/.local/share/godot/export_templates/${VERSION}.stable ~/.local/share/godot/export_templates/${VERSION}.stable
      shell: bash
      env:
        VERSION: ${{ inputs.version }}

    - uses: dsaltares/fetch-gh-release-asset@master
      id: release-asset
      if: ${{ inputs.encryption-key }}
      with:
        version: 'tags/template-${{ inputs.version }}'
        file: template_release.*${{ inputs.channel }}.*
        target: ${{ inputs.game-folder }}/custom_templates/
        repo: ${{ inputs.repo }}
        regex: true
    
    # The credentials file does not exist and we don't know how many export presets there are
    # So just create a bunch of them, would be nice to have a better way to set it...
    - if: steps.release-asset.outcome == 'success'
      run: |
        mkdir -p .godot
        FILE=".godot/export_credentials.cfg"
        echo "" > $FILE

        for i in $(seq 0 5); do
          echo "[preset.$i]" >> $FILE
          echo "script_encryption_key=\"$KEY\"" >> $FILE
        done
      shell: bash
      working-directory: ${{ inputs.game-folder }}
      env:
        KEY: ${{ inputs.encryption-key }}

    - if: steps.release-asset.outcome == 'success'
      run: |
        FILE=$(ls custom_templates/template_release.${{ inputs.channel }}*)
        FILE="\"${FILE}\""
        echo $FILE

        sed -e "/custom_template\/release/ s:\".*\":$FILE:" -i export_presets.cfg
        sed -e "/encrypt_pck/c\encrypt_pck=true" -i export_presets.cfg
        sed -e "/encryption_include_filters/c\encryption_include_filters=\"*\"" -i export_presets.cfg

        # this needs to be disabled
        sed -e "/encrypt_directory/c\encrypt_directory=false" -i export_presets.cfg

        cat export_presets.cfg
      shell: bash
      working-directory: ${{ inputs.game-folder }}
      env:
        KEY: ${{ inputs.encryption-key }}